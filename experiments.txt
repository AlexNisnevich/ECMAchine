(define (to-lines strings)
	(if (= 1 (length strings))
	    (car strings)
	    (+ (car strings) "\n" (to-lines (cdr strings)))))
(define ed.contents "newbuffer\nlinetwo")
(define ed.filename "")
(define ed.cursor 0)
(define (ed . args)
	(if (= 0 (length args))
	    (ed 'refresh)
	    (let ((func (car args))
	          (params (cdr args)))
	         (cond ((= func 'refresh)
	         				(let ((display-contents 
	         							 (to-lines 
	         							  (cons "== New File ==" 
	         							 				(map (lambda (x) (+ "> " x))
	         							 				     (js-apply 'split ed.contents "\n"))))))
	         	     			 (overlay display-contents 30 30 'ed)))
	               ((= func 'exit) '())
	               ((= func 'new) '())
	               ((= func 'open) '())
	               ((= func 'save) '())
	               ((= func 'save-as) '())
	               ((= func 'up) '())
	               ((= func 'down) '())
	               ((= func 'newline) '())
	               ((= func 'insert) '())
	               ((= func 'edit) '())
	         ))))